#!/usr/bin/env python3
"""
Script de demonstra√ß√£o do projeto Gamix
Executa testes b√°sicos e mostra informa√ß√µes do projeto
"""

import os
import sys
from datetime import datetime

def print_header():
    """Imprime o cabe√ßalho do projeto"""
    print("=" * 60)
    print("üéÆ GAMIX - SISTEMA DE GERENCIAMENTO DE USU√ÅRIOS")
    print("=" * 60)
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üìÅ Diret√≥rio: {os.getcwd()}")
    print("=" * 60)

def check_project_structure():
    """Verifica a estrutura do projeto"""
    print("\nüìÅ ESTRUTURA DO PROJETO:")
    print("-" * 30)
    
    structure = {
        "controller/": ["app.py"],
        "model/": ["__init__.py", "database.py"],
        "templates/": [
            "base.html", "index.html", "dashboard.html", "usuarios.html",
            "consulta_data.html", "consulta_relacional.html", "consulta_juncao.html",
            "consulta_group_by.html", "consulta_between.html", "consulta_ordem.html",
            "consulta_distinta.html", "consulta_J.html", "consulta_pedido.html",
            "consulta_exists.html", "consulta_conta.html"
        ],
        "static/": ["styles.css", "script.js"],
        "./": ["config.py", "requirements.txt", "init_db.py", "README.md", ".env.example"]
    }
    
    total_files = 0
    found_files = 0
    
    for directory, files in structure.items():
        print(f"\nüìÇ {directory}")
        for file in files:
            file_path = os.path.join(directory, file) if directory != "./" else file
            total_files += 1
            if os.path.exists(file_path):
                print(f"  ‚úÖ {file}")
                found_files += 1
            else:
                print(f"  ‚ùå {file}")
    
    print(f"\nüìä Arquivos encontrados: {found_files}/{total_files}")
    return found_files == total_files

def show_features():
    """Mostra as funcionalidades do projeto"""
    print("\nüöÄ FUNCIONALIDADES IMPLEMENTADAS:")
    print("-" * 40)
    
    features = [
        "‚úÖ Arquitetura MVC organizada",
        "‚úÖ Sistema de autentica√ß√£o com hash de senhas",
        "‚úÖ Pool de conex√µes com banco de dados",
        "‚úÖ 11 tipos diferentes de consultas SQL",
        "‚úÖ Interface responsiva com tema escuro",
        "‚úÖ Templates com heran√ßa (base.html)",
        "‚úÖ JavaScript para interatividade",
        "‚úÖ Tratamento de erros e valida√ß√µes",
        "‚úÖ Sistema de sess√µes Flask",
        "‚úÖ Configura√ß√µes centralizadas",
        "‚úÖ Scripts de teste e inicializa√ß√£o",
        "‚úÖ Documenta√ß√£o completa"
    ]
    
    for feature in features:
        print(f"  {feature}")

def show_sql_queries():
    """Mostra os tipos de consultas SQL implementadas"""
    print("\nüìä CONSULTAS SQL IMPLEMENTADAS:")
    print("-" * 40)
    
    queries = [
        ("Consulta por Data", "EXTRACT(YEAR FROM data_cadastro)"),
        ("Consulta Relacional", "WHERE id > 1 AND email LIKE '%@%.com'"),
        ("Consulta com JOIN", "usuarios u JOIN pedidos p ON u.id = p.usuario_id"),
        ("Consulta GROUP BY", "GROUP BY ano ORDER BY ano DESC"),
        ("Consulta BETWEEN", "WHERE id BETWEEN 1 AND 10"),
        ("Consulta ORDER BY", "ORDER BY nome DESC"),
        ("Consulta DISTINCT", "SELECT DISTINCT EXTRACT(YEAR...)"),
        ("Consulta LIKE", "WHERE nome ILIKE 'j%'"),
        ("Consulta EXISTS", "WHERE EXISTS (SELECT 1 FROM pedidos...)"),
        ("Consulta IN", "WHERE id IN (SELECT usuario_id FROM pedidos)"),
        ("Consulta COUNT", "SELECT COUNT(*) FROM usuarios")
    ]
    
    for i, (name, example) in enumerate(queries, 1):
        print(f"  {i:2d}. {name}")
        print(f"      üí° {example}")

def show_technologies():
    """Mostra as tecnologias utilizadas"""
    print("\nüõ†Ô∏è TECNOLOGIAS UTILIZADAS:")
    print("-" * 30)
    
    technologies = {
        "Backend": ["Python 3.x", "Flask", "psycopg2"],
        "Frontend": ["HTML5", "CSS3", "JavaScript"],
        "Banco de Dados": ["PostgreSQL"],
        "Seguran√ßa": ["Werkzeug", "Hash de senhas", "Sess√µes Flask"],
        "Ferramentas": ["Pool de conex√µes", "Context managers", "Logging"]
    }
    
    for category, techs in technologies.items():
        print(f"\nüîß {category}:")
        for tech in techs:
            print(f"  ‚Ä¢ {tech}")

def show_installation_steps():
    """Mostra os passos de instala√ß√£o"""
    print("\nüìã PASSOS PARA INSTALA√á√ÉO:")
    print("-" * 35)
    
    steps = [
        "1. Instalar PostgreSQL",
        "2. Criar usu√°rio e banco de dados",
        "3. Instalar depend√™ncias Python: pip install -r requirements.txt",
        "4. Configurar vari√°veis de ambiente (.env)",
        "5. Inicializar banco: python init_db.py",
        "6. Executar aplica√ß√£o: python controller/app.py",
        "7. Acessar: http://localhost:5000"
    ]
    
    for step in steps:
        print(f"  {step}")

def show_testing_info():
    """Mostra informa√ß√µes sobre testes"""
    print("\nüß™ TESTES DISPON√çVEIS:")
    print("-" * 25)
    
    tests = [
        ("test_app.py", "Teste de integridade da aplica√ß√£o"),
        ("test_db.py", "Teste de conex√£o com banco de dados"),
        ("demo.py", "Script de demonstra√ß√£o (este arquivo)")
    ]
    
    for test_file, description in tests:
        status = "‚úÖ" if os.path.exists(test_file) else "‚ùå"
        print(f"  {status} {test_file} - {description}")

def main():
    """Fun√ß√£o principal"""
    print_header()
    
    # Verificar estrutura
    structure_ok = check_project_structure()
    
    # Mostrar informa√ß√µes
    show_features()
    show_sql_queries()
    show_technologies()
    show_installation_steps()
    show_testing_info()
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìã RESUMO DO PROJETO")
    print("=" * 60)
    
    if structure_ok:
        print("‚úÖ Estrutura do projeto: COMPLETA")
    else:
        print("‚ö†Ô∏è  Estrutura do projeto: INCOMPLETA")
    
    print("‚úÖ Documenta√ß√£o: COMPLETA")
    print("‚úÖ Configura√ß√µes: PRONTAS")
    print("‚úÖ Templates: IMPLEMENTADOS")
    print("‚úÖ Estilos: APLICADOS")
    print("‚úÖ Scripts de teste: DISPON√çVEIS")
    
    print("\nüéØ PR√ìXIMOS PASSOS:")
    print("1. Configure o PostgreSQL")
    print("2. Execute: python init_db.py")
    print("3. Execute: python controller/app.py")
    print("4. Acesse: http://localhost:5000")
    
    print("\nüéÆ Projeto Gamix pronto para uso!")
    print("=" * 60)

if __name__ == "__main__":
    main()
